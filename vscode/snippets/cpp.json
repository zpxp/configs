{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"length": {
		"prefix": "length",
		"body": ["sizeof($1) / sizeof($1[0])$0"		],
		"description": "c arr length"
	},


	"dto": {
		"prefix": "dto",
		"body": [
			"#pragma once",
			"",
			"#include \"../../libs/include/Guid.hpp\"",
			"#include \"date/date.h\"",
			"#include \"baseDto.h\"",
			"#include \"../utils/serializer.h\"",
			"#include <string>",
			"#include <chrono>",
			"",
			"using namespace std;",
			"using namespace xg;",
			"",
			"namespace Dtos",
			"{",
"	struct $1Dto : BaseDto",
"	{",
"		int Id;",
"		string name;",
			"",
			"",
			"",
"		//json",
"		constexpr static auto properties = std::make_tuple(",
"			JSON::property(&$1Dto::Id, \"id\"),",
"			JSON::property(&$1Dto::name, \"name\"),",
			"",
			"",
"			JSON::property(&$1Dto::CreatedOnUtc, \"createdOnUtc\"),",
"			JSON::property(&$1Dto::CreatedById, \"createdById\"),",
"			JSON::property(&$1Dto::ModifiedOnUtc, \"modifiedOnUtc\"),",
"			JSON::property(&$1Dto::ModifiedById, \"modifiedById\"),",
"			JSON::property(&$1Dto::Deleted, \"deleted\"));",
"	};",
			"",
			"};"
		],
		"description": "Blank Dto"
	},
	"Controller": {
		"prefix": "ctrlr",
		"body": [
			"#include \"../controller_utils.h\"",
			"",
			"#include \"I$1.h\"",
			"#include \"../../dtos/$1Dto.h\"",
			"#include \"../../model/DataBase.h\"",
			"#include \"../../model/model.h\"",
			"#include \"../../../config.h\"",
			"#include \"../../utils/serializer.h\"",
			"#include \"../../utils/mapper.h\"",
			"",
			"#include <fruit/fruit.h>",
			"#include <pistache/router.h>",
			"#include <pistache/http.h>",
			"#include <sqlpp11/sqlpp11.h>",
			"#include </usr/local/include/sqlpp11/mysql/mysql.h>",
			"",
			"#include <string>",
			"#include <chrono>",
			"",
			"",
			"using namespace Controllers;",
			"using namespace Context;",
			"using namespace Pistache;",
			"using namespace Dtos;",
			"using namespace std;",
			"using namespace sqlpp;",
			"",
			"",
			"namespace Controllers",
			"{",
			"",
			"	class $1Controller : public I$1",
			"	{",
			"	private:",
			"		IDbContext* db;",
			"",
			"	public:",
			"		INJECT($1Controller(IDbContext* _db))",
			"		: db(_db)",
			"		{",
			"		}",
			"",
			"		virtual $1Dto create$1(const Rest::Request& req) override",
			"		{",
			"		}",
			"	};",
			"",
			"	fruit::Component<I$1> get$1Component()",
			"	{",
			"		return fruit::createComponent()",
			"			.bind<I$1, $1Controller>()",
			"			.install(getDbContextComponent);",
			"	}",
			"}"
		],
		"description": "Blank Controller"
	},
	"Ctrl Interface": {
		"prefix": "interfacectrl",
		"body": [
			"#pragma once",
			"",
			"#include \"../IController.h\"",
			"#include <fruit/fruit.h>",
			"#include <pistache/router.h>",
			"#include <string>",
			"",
			"using namespace Pistache;",
			"",
			"namespace Controllers",
			"{",
			"	class I$1",
			"	{",
			"	public:",
			"		virtual void create$1(const Rest::Request& req) = 0;",
			"	};",
			"",
			"",
			"",
			"	fruit::Component<I$1> get$1Component();",
			"}"
		],
		"description": "Ctrl Interface"
	},
	"Logic header": {
		"prefix": "logiccpp",
		"body": [
			"#include \"$2.h\"",
			"#include \"../../dtos/documentationDto.h\"",
			"#include \"../../model/DataBase.h\"",
			"#include \"../../model/model.h\"",
			"#include \"../../../config.h\"",
			"#include \"../../utils/serializer.h\"",
			"#include \"../../utils/mapper.h\"",
			"#include \"../../utils/utils.h\"",
			"",
			"#include <fruit/fruit.h>",
			"#include <pistache/router.h>",
			"#include <pistache/http.h>",
			"#include <sqlpp11/sqlpp11.h>",
			"#include </usr/local/include/sqlpp11/mysql/mysql.h>",
			"#include \"../../boot/identity.h\"",
			"",
			"#include <string>",
			"#include <vector>",
			"#include <list>",
			"#include <chrono>",
			"",
			"",
			"using namespace Context;",
			"using namespace Pistache;",
			"using namespace Backend;",
			"using namespace Dtos;",
			"using namespace std;",
			"using namespace sqlpp;",
			"",
			"",
			"namespace Logic",
			"{",
			"",
			"	Dtos::$1Dto $1::create$1(Dtos::$1Dto& dto)",
			"	{",
			"		// dto.$1ationId = newGuid();",
			"",
			"		// Mapper::Map(dto, db->context(), id);",
			"",
			"		// auto model = Model::$1ation();",
			"		// auto query = db->context()",
			"		// 				 ->run(select(all_of(model))",
			"		// 						   .from(model)",
			"		// 						   .where(model.$1ationId == dto.$1ationId));",
			"",
			"",
			"		// auto result = $1ationDto();",
			"		// const auto& row = query.front();",
			"",
			"		// FROM_$1ATION(row, result)",
			"",
			"		// auto pagemodel = Model::DocumentationPage();",
			"		// auto pagequery = db->context()",
			"		// 					 ->run(select(all_of(pagemodel))",
			"		// 							   .from(pagemodel)",
			"		// 							   .where(pagemodel.DocumentationId == dto.DocumentationId));",
			"",
			"",
			"		// list<$1Dto> pages;",
			"		// for (auto& item : pagequery)",
			"		// {",
			"		// 	auto page = $1Dto();",
			"",
			"		// 	FROM_DOCUMENTATIONPAGE(item, page)",
			"",
			"		// 	pages.push_front(page);",
			"		// }",
			"",
			"		// getPageTree(pages, result.RootPage);",
			"",
			"		// return result;",
			"",
			"	}",
			"",
			"	Dtos::$1Dto $1::get$1(xg::Guid& id)",
			"	{",
			"		// auto model = Model::Documentation();",
			"		// auto query = db->context()->run(select(all_of(model))",
			"		// 									.from(model)",
			"		// 									.where(model.DocumentationId == id));",
			"",
			"",
			"		// auto result = DocumentationDto();",
			"		// const auto& row = query.front();",
			"",
			"		// FROM_DOCUMENTATION(row, result)",
			"",
			"		// return result;",
			"	}",
			"",
			"	$1::$1(Context::IDbContext* _db, Backend::Identity* d)",
			"	: db(_db), id(d) {}",
			"",
			"",
			"	fruit::Component<$1> get$1Logic(Backend::Identity* id)",
			"	{",
			"		return fruit::createComponent()",
			"			.registerConstructor<$1(Context::IDbContext*, Backend::Identity*)>()",
			"			.install(getDbContextComponent)",
			"			.bindInstance(*id);",
			"	}",
			"}"
		],
		"description": "Logic cpp"
	},
	"Logic cpp": {
		"prefix": "logicheader",
		"body": [
			"#pragma once",
			"#include \"../../dtos/$2Dto.h\"",
			"#include \"../../../libs/include/Guid.hpp\"",
			"#include \"../../model/DataBase.h\"",
			"#include <fruit/fruit.h>",
			"#include <pistache/router.h>",
			"#include <string>",
			"",
			"",
			"using namespace Pistache;",
			"",
			"namespace Backend",
			"{",
			"	class Identity;",
			"}",
			"",
			"namespace Logic",
			"{",
			"	class $1",
			"	{",
			"		Context::IDbContext* db;",
			"		Backend::Identity* id;",
			"",
			"	public:",
			"		$1(Context::IDbContext* _db, Backend::Identity* d);",
			"",
			"		Dtos::$1Dto create$1(Dtos::$1Dto& dto);",
			"		Dtos::$1Dto get$1(xg::Guid& id);",
			"	};",
			"",
			"",
			"	fruit::Component<$1> get$1Logic(Backend::Identity* id);",
			"}"
		],
		"description": "logic header"
	}
}